// <auto-generated />
using System;
using CINEMA.API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CINEMA.API.Migrations
{
    [DbContext(typeof(CinemaDBContext))]
    [Migration("20220606143129_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CINEMA.API.Entity.CinemaRoom", b =>
                {
                    b.Property<int>("CinemaRoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("lastModified_18118032")
                        .HasColumnType("datetime2");

                    b.Property<string>("number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("seats")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.HasKey("CinemaRoomID");

                    b.HasIndex("number")
                        .IsUnique()
                        .HasFilter("[number] IS NOT NULL");

                    b.ToTable("CinemaRoom");

                    b.HasData(
                        new
                        {
                            CinemaRoomID = 1,
                            lastModified_18118032 = new DateTime(2022, 6, 6, 17, 31, 28, 569, DateTimeKind.Local).AddTicks(6381),
                            number = "1",
                            seats = 100
                        },
                        new
                        {
                            CinemaRoomID = 2,
                            lastModified_18118032 = new DateTime(2022, 6, 6, 17, 31, 28, 573, DateTimeKind.Local).AddTicks(7822),
                            number = "2",
                            seats = 120
                        },
                        new
                        {
                            CinemaRoomID = 3,
                            lastModified_18118032 = new DateTime(2022, 6, 6, 17, 31, 28, 573, DateTimeKind.Local).AddTicks(7894),
                            number = "3",
                            seats = 80
                        });
                });

            modelBuilder.Entity("CINEMA.API.Entity.Film", b =>
                {
                    b.Property<int>("FilmID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cinemaRoomId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("end")
                        .HasColumnType("DateTime");

                    b.Property<int>("genreID")
                        .HasColumnType("int");

                    b.Property<DateTime>("lastModified_18118032")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("start")
                        .HasColumnType("DateTime");

                    b.Property<decimal>("ticketPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("FilmID");

                    b.HasIndex("cinemaRoomId");

                    b.HasIndex("genreID");

                    b.HasIndex("name")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("CINEMA.API.Entity.Genre", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("lastModified_18118032")
                        .HasColumnType("datetime2");

                    b.HasKey("GenreID");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            GenreID = 1,
                            Name = "Fantasy",
                            lastModified_18118032 = new DateTime(2022, 6, 6, 17, 31, 28, 580, DateTimeKind.Local).AddTicks(774)
                        },
                        new
                        {
                            GenreID = 2,
                            Name = "Comedy",
                            lastModified_18118032 = new DateTime(2022, 6, 6, 17, 31, 28, 580, DateTimeKind.Local).AddTicks(1411)
                        },
                        new
                        {
                            GenreID = 3,
                            Name = "Mystery",
                            lastModified_18118032 = new DateTime(2022, 6, 6, 17, 31, 28, 580, DateTimeKind.Local).AddTicks(1457)
                        },
                        new
                        {
                            GenreID = 4,
                            Name = "Thriller",
                            lastModified_18118032 = new DateTime(2022, 6, 6, 17, 31, 28, 580, DateTimeKind.Local).AddTicks(1465)
                        },
                        new
                        {
                            GenreID = 5,
                            Name = "Romance",
                            lastModified_18118032 = new DateTime(2022, 6, 6, 17, 31, 28, 580, DateTimeKind.Local).AddTicks(1472)
                        });
                });

            modelBuilder.Entity("CINEMA.API.Entity.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("filmId")
                        .HasColumnType("int");

                    b.Property<DateTime>("lastModified_18118032")
                        .HasColumnType("datetime2");

                    b.Property<int>("numberOfTickets")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("ReservationID");

                    b.HasIndex("filmId");

                    b.HasIndex("userID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("CINEMA.API.Entity.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("lastModified_18118032")
                        .HasColumnType("datetime2");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("roleID")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserID");

                    b.HasIndex("roleID");

                    b.HasIndex("username")
                        .IsUnique()
                        .HasFilter("[username] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CINEMA.API.Entity.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("lastModified_18118032")
                        .HasColumnType("datetime2");

                    b.Property<string>("role")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserRoleID");

                    b.HasIndex("role")
                        .IsUnique()
                        .HasFilter("[role] IS NOT NULL");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserRoleID = 1,
                            lastModified_18118032 = new DateTime(2022, 6, 6, 17, 31, 28, 582, DateTimeKind.Local).AddTicks(306),
                            role = "Admin"
                        },
                        new
                        {
                            UserRoleID = 2,
                            lastModified_18118032 = new DateTime(2022, 6, 6, 17, 31, 28, 582, DateTimeKind.Local).AddTicks(901),
                            role = "User"
                        });
                });

            modelBuilder.Entity("CINEMA.API.Entity.Film", b =>
                {
                    b.HasOne("CINEMA.API.Entity.CinemaRoom", "cinemaRoom")
                        .WithMany()
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CINEMA.API.Entity.Genre", "genre")
                        .WithMany("films")
                        .HasForeignKey("genreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CINEMA.API.Entity.Reservation", b =>
                {
                    b.HasOne("CINEMA.API.Entity.Film", "film")
                        .WithMany("reservations")
                        .HasForeignKey("filmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CINEMA.API.Entity.User", "user")
                        .WithMany("reservations")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CINEMA.API.Entity.User", b =>
                {
                    b.HasOne("CINEMA.API.Entity.UserRole", "role")
                        .WithMany("users")
                        .HasForeignKey("roleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
